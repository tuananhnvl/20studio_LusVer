  const WaveShaderMaterial = shaderMaterial(
    { uTime: 0, uTexture: null,uTextureNoiseDis:null},
    `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    `
      precision mediump float;
      uniform float uTime;
      uniform sampler2D uTexture;
      uniform sampler2D uTextureNoiseDis;
      uniform vec3 uColor;
  
      varying vec2 vUv;
  
      float rand(float n){return fract(sin(n) * 43758.5453123);}

    float noise(float p){
        float fl = floor(p);
    float fc = fract(p);
        return mix(rand(fl), rand(fl + 1.0), fc);
    }

  
    

      void main() {
        vec3 t = texture2D(uTexture, vUv).rgb;   
        vec3 r  =  t;
   
        float a = (r.x - .1);

        if(r.r < 0.1 && r.b < 0.1) {
            r=vec3(0.,0.,0.);
        } 
      
        gl_FragColor = vec4(  r ,a * .1);
   
        
      }
    `
  )
  const WaveShaderMaterial22222 = shaderMaterial(
    { uTime: 0, uTexture: null,uTextureNoiseDis:null},
    `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    `
      precision mediump float;
      uniform float uTime;
      uniform sampler2D uTexture;
      uniform sampler2D uTextureNoiseDis;
      uniform vec3 uColor;
  
      varying vec2 vUv;

      void main() {
        vec3 t = texture2D(uTexture, vUv).rgb;   
        gl_FragColor = vec4(t,1.);
        
      }
    `
  )
  extend({ WaveShaderMaterial })
  extend({ WaveShaderMaterial22222 })
  const FBOScenes = ({ props }) => {
    const {viewport} = useThree()
    const target = useFBO(props)
    const target1 = useFBO(props)
    const cam = useRef()
    const shader = useRef()
    const shader1 = useRef()
    const scene = useMemo(() => {
      const scene = new THREE.Scene()
      return scene
    }, [])
    const scene1 = useMemo(() => {
        const scene1 = new THREE.Scene()
        return scene1
      }, [])
    const texture = useTexture('noise-dis1.png')
      
    useFrame((state) => {
     
     
      state.gl.setRenderTarget(target)
      state.gl.render(scene, cam.current)
      state.gl.setRenderTarget(null)

   
    })
  
  
    useEffect(() => { 
        if(shader.current) { 
            shader.current.transparent = true
        }
        
        
       
    },[shader,texture])
    useFrame(({ clock }) => {  
         
        if(shader.current) {         shader.current.uTime = clock.getElapsedTime()
            shader1.current.uTime = clock.getElapsedTime() }

    })
    return (    
      <>
        <PerspectiveCamera ref={cam} position={[0, 0, 0]} />
   
        {createPortal(  <EffSimuControls/>  ,scene)}
        <group>
            <mesh>
                <planeGeometry args={[viewport.width,viewport.height,2,2]} />
                <waveShaderMaterial ref={shader} uTexture={target.texture} />
               {/*  <meshBasicMaterial color={'blue'}  wireframe={true}/> */}
            </mesh>
            <mesh position={[(viewport.width/2 ) - (viewport.width /5/2) ,(viewport.height/2 ) - (viewport.height /5),0]}>
                <planeGeometry args={[viewport.width /5, viewport.height/5]}/>
                <waveShaderMaterial22222 ref={shader1} uTexture={target.texture} />
            </mesh>
            
        </group>
      </>
    )
  }
  


